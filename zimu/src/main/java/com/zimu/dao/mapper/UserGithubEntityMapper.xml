<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zimu.dao.UserGithubEntityMapper">
  <resultMap id="BaseResultMap" type="com.zimu.domain.entity.UserGithubEntity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="github_user_id" jdbcType="BIGINT" property="githubUserId" />
    <result column="login" jdbcType="VARCHAR" property="login" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="avatar_url" jdbcType="VARCHAR" property="avatarUrl" />
    <result column="gravatar_id" jdbcType="VARCHAR" property="gravatarId" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="html_url" jdbcType="VARCHAR" property="htmlUrl" />
    <result column="followers_url" jdbcType="VARCHAR" property="followersUrl" />
    <result column="following_url" jdbcType="VARCHAR" property="followingUrl" />
    <result column="gists_url" jdbcType="VARCHAR" property="gistsUrl" />
    <result column="starred_url" jdbcType="VARCHAR" property="starredUrl" />
    <result column="subscriptions_url" jdbcType="VARCHAR" property="subscriptionsUrl" />
    <result column="organizations_url" jdbcType="VARCHAR" property="organizationsUrl" />
    <result column="repos_url" jdbcType="VARCHAR" property="reposUrl" />
    <result column="events_url" jdbcType="VARCHAR" property="eventsUrl" />
    <result column="received_events_url" jdbcType="VARCHAR" property="receivedEventsUrl" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="site_admin" jdbcType="VARCHAR" property="siteAdmin" />
    <result column="company" jdbcType="VARCHAR" property="company" />
    <result column="blog" jdbcType="VARCHAR" property="blog" />
    <result column="location" jdbcType="VARCHAR" property="location" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="hireable" jdbcType="VARCHAR" property="hireable" />
    <result column="bio" jdbcType="VARCHAR" property="bio" />
    <result column="public_repos" jdbcType="INTEGER" property="publicRepos" />
    <result column="public_gists" jdbcType="INTEGER" property="publicGists" />
    <result column="followers" jdbcType="INTEGER" property="followers" />
    <result column="following" jdbcType="INTEGER" property="following" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="private_gists" jdbcType="INTEGER" property="privateGists" />
    <result column="total_private_repos" jdbcType="INTEGER" property="totalPrivateRepos" />
    <result column="owned_private_repos" jdbcType="INTEGER" property="ownedPrivateRepos" />
    <result column="disk_usage" jdbcType="VARCHAR" property="diskUsage" />
    <result column="collaborators" jdbcType="INTEGER" property="collaborators" />
    <result column="two_factor_authentication" jdbcType="VARCHAR" property="twoFactorAuthentication" />
    <result column="plan_name" jdbcType="VARCHAR" property="planName" />
    <result column="plan_space" jdbcType="VARCHAR" property="planSpace" />
    <result column="plan_collaborators" jdbcType="INTEGER" property="planCollaborators" />
    <result column="plan_private_repos" jdbcType="INTEGER" property="planPrivateRepos" />
    <result column="del_flag" jdbcType="INTEGER" property="delFlag" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="version" jdbcType="INTEGER" property="version" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, user_id, github_user_id, login, name, avatar_url, gravatar_id, url, html_url, 
    followers_url, following_url, gists_url, starred_url, subscriptions_url, organizations_url, 
    repos_url, events_url, received_events_url, type, site_admin, company, blog, location, 
    email, hireable, bio, public_repos, public_gists, followers, following, created_at, 
    updated_at, private_gists, total_private_repos, owned_private_repos, disk_usage, 
    collaborators, two_factor_authentication, plan_name, plan_space, plan_collaborators, 
    plan_private_repos, del_flag, create_by, create_date, update_by, update_date, version
  </sql>
  <select id="selectByExample" parameterType="com.zimu.domain.entity.UserGithubEntityExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_user_github
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from t_user_github
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from t_user_github
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.zimu.domain.entity.UserGithubEntityExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from t_user_github
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zimu.domain.entity.UserGithubEntity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_user_github (user_id, github_user_id, login, 
      name, avatar_url, gravatar_id, 
      url, html_url, followers_url, 
      following_url, gists_url, starred_url, 
      subscriptions_url, organizations_url, repos_url, 
      events_url, received_events_url, type, 
      site_admin, company, blog, 
      location, email, hireable, 
      bio, public_repos, public_gists, 
      followers, following, created_at, 
      updated_at, private_gists, total_private_repos, 
      owned_private_repos, disk_usage, collaborators, 
      two_factor_authentication, plan_name, plan_space, 
      plan_collaborators, plan_private_repos, del_flag, 
      create_by, create_date, update_by, 
      update_date, version)
    values (#{userId,jdbcType=BIGINT}, #{githubUserId,jdbcType=BIGINT}, #{login,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{avatarUrl,jdbcType=VARCHAR}, #{gravatarId,jdbcType=VARCHAR}, 
      #{url,jdbcType=VARCHAR}, #{htmlUrl,jdbcType=VARCHAR}, #{followersUrl,jdbcType=VARCHAR}, 
      #{followingUrl,jdbcType=VARCHAR}, #{gistsUrl,jdbcType=VARCHAR}, #{starredUrl,jdbcType=VARCHAR}, 
      #{subscriptionsUrl,jdbcType=VARCHAR}, #{organizationsUrl,jdbcType=VARCHAR}, #{reposUrl,jdbcType=VARCHAR}, 
      #{eventsUrl,jdbcType=VARCHAR}, #{receivedEventsUrl,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, 
      #{siteAdmin,jdbcType=VARCHAR}, #{company,jdbcType=VARCHAR}, #{blog,jdbcType=VARCHAR}, 
      #{location,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{hireable,jdbcType=VARCHAR}, 
      #{bio,jdbcType=VARCHAR}, #{publicRepos,jdbcType=INTEGER}, #{publicGists,jdbcType=INTEGER}, 
      #{followers,jdbcType=INTEGER}, #{following,jdbcType=INTEGER}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedAt,jdbcType=TIMESTAMP}, #{privateGists,jdbcType=INTEGER}, #{totalPrivateRepos,jdbcType=INTEGER}, 
      #{ownedPrivateRepos,jdbcType=INTEGER}, #{diskUsage,jdbcType=VARCHAR}, #{collaborators,jdbcType=INTEGER}, 
      #{twoFactorAuthentication,jdbcType=VARCHAR}, #{planName,jdbcType=VARCHAR}, #{planSpace,jdbcType=VARCHAR}, 
      #{planCollaborators,jdbcType=INTEGER}, #{planPrivateRepos,jdbcType=INTEGER}, #{delFlag,jdbcType=INTEGER}, 
      #{createBy,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}, 
      #{updateDate,jdbcType=TIMESTAMP}, #{version,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.zimu.domain.entity.UserGithubEntity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_user_github
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="githubUserId != null">
        github_user_id,
      </if>
      <if test="login != null">
        login,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="avatarUrl != null">
        avatar_url,
      </if>
      <if test="gravatarId != null">
        gravatar_id,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="htmlUrl != null">
        html_url,
      </if>
      <if test="followersUrl != null">
        followers_url,
      </if>
      <if test="followingUrl != null">
        following_url,
      </if>
      <if test="gistsUrl != null">
        gists_url,
      </if>
      <if test="starredUrl != null">
        starred_url,
      </if>
      <if test="subscriptionsUrl != null">
        subscriptions_url,
      </if>
      <if test="organizationsUrl != null">
        organizations_url,
      </if>
      <if test="reposUrl != null">
        repos_url,
      </if>
      <if test="eventsUrl != null">
        events_url,
      </if>
      <if test="receivedEventsUrl != null">
        received_events_url,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="siteAdmin != null">
        site_admin,
      </if>
      <if test="company != null">
        company,
      </if>
      <if test="blog != null">
        blog,
      </if>
      <if test="location != null">
        location,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="hireable != null">
        hireable,
      </if>
      <if test="bio != null">
        bio,
      </if>
      <if test="publicRepos != null">
        public_repos,
      </if>
      <if test="publicGists != null">
        public_gists,
      </if>
      <if test="followers != null">
        followers,
      </if>
      <if test="following != null">
        following,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="privateGists != null">
        private_gists,
      </if>
      <if test="totalPrivateRepos != null">
        total_private_repos,
      </if>
      <if test="ownedPrivateRepos != null">
        owned_private_repos,
      </if>
      <if test="diskUsage != null">
        disk_usage,
      </if>
      <if test="collaborators != null">
        collaborators,
      </if>
      <if test="twoFactorAuthentication != null">
        two_factor_authentication,
      </if>
      <if test="planName != null">
        plan_name,
      </if>
      <if test="planSpace != null">
        plan_space,
      </if>
      <if test="planCollaborators != null">
        plan_collaborators,
      </if>
      <if test="planPrivateRepos != null">
        plan_private_repos,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="version != null">
        version,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="githubUserId != null">
        #{githubUserId,jdbcType=BIGINT},
      </if>
      <if test="login != null">
        #{login,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null">
        #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="gravatarId != null">
        #{gravatarId,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="htmlUrl != null">
        #{htmlUrl,jdbcType=VARCHAR},
      </if>
      <if test="followersUrl != null">
        #{followersUrl,jdbcType=VARCHAR},
      </if>
      <if test="followingUrl != null">
        #{followingUrl,jdbcType=VARCHAR},
      </if>
      <if test="gistsUrl != null">
        #{gistsUrl,jdbcType=VARCHAR},
      </if>
      <if test="starredUrl != null">
        #{starredUrl,jdbcType=VARCHAR},
      </if>
      <if test="subscriptionsUrl != null">
        #{subscriptionsUrl,jdbcType=VARCHAR},
      </if>
      <if test="organizationsUrl != null">
        #{organizationsUrl,jdbcType=VARCHAR},
      </if>
      <if test="reposUrl != null">
        #{reposUrl,jdbcType=VARCHAR},
      </if>
      <if test="eventsUrl != null">
        #{eventsUrl,jdbcType=VARCHAR},
      </if>
      <if test="receivedEventsUrl != null">
        #{receivedEventsUrl,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="siteAdmin != null">
        #{siteAdmin,jdbcType=VARCHAR},
      </if>
      <if test="company != null">
        #{company,jdbcType=VARCHAR},
      </if>
      <if test="blog != null">
        #{blog,jdbcType=VARCHAR},
      </if>
      <if test="location != null">
        #{location,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="hireable != null">
        #{hireable,jdbcType=VARCHAR},
      </if>
      <if test="bio != null">
        #{bio,jdbcType=VARCHAR},
      </if>
      <if test="publicRepos != null">
        #{publicRepos,jdbcType=INTEGER},
      </if>
      <if test="publicGists != null">
        #{publicGists,jdbcType=INTEGER},
      </if>
      <if test="followers != null">
        #{followers,jdbcType=INTEGER},
      </if>
      <if test="following != null">
        #{following,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="privateGists != null">
        #{privateGists,jdbcType=INTEGER},
      </if>
      <if test="totalPrivateRepos != null">
        #{totalPrivateRepos,jdbcType=INTEGER},
      </if>
      <if test="ownedPrivateRepos != null">
        #{ownedPrivateRepos,jdbcType=INTEGER},
      </if>
      <if test="diskUsage != null">
        #{diskUsage,jdbcType=VARCHAR},
      </if>
      <if test="collaborators != null">
        #{collaborators,jdbcType=INTEGER},
      </if>
      <if test="twoFactorAuthentication != null">
        #{twoFactorAuthentication,jdbcType=VARCHAR},
      </if>
      <if test="planName != null">
        #{planName,jdbcType=VARCHAR},
      </if>
      <if test="planSpace != null">
        #{planSpace,jdbcType=VARCHAR},
      </if>
      <if test="planCollaborators != null">
        #{planCollaborators,jdbcType=INTEGER},
      </if>
      <if test="planPrivateRepos != null">
        #{planPrivateRepos,jdbcType=INTEGER},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zimu.domain.entity.UserGithubEntityExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from t_user_github
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update t_user_github
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.githubUserId != null">
        github_user_id = #{record.githubUserId,jdbcType=BIGINT},
      </if>
      <if test="record.login != null">
        login = #{record.login,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.avatarUrl != null">
        avatar_url = #{record.avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.gravatarId != null">
        gravatar_id = #{record.gravatarId,jdbcType=VARCHAR},
      </if>
      <if test="record.url != null">
        url = #{record.url,jdbcType=VARCHAR},
      </if>
      <if test="record.htmlUrl != null">
        html_url = #{record.htmlUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.followersUrl != null">
        followers_url = #{record.followersUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.followingUrl != null">
        following_url = #{record.followingUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.gistsUrl != null">
        gists_url = #{record.gistsUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.starredUrl != null">
        starred_url = #{record.starredUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.subscriptionsUrl != null">
        subscriptions_url = #{record.subscriptionsUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.organizationsUrl != null">
        organizations_url = #{record.organizationsUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.reposUrl != null">
        repos_url = #{record.reposUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.eventsUrl != null">
        events_url = #{record.eventsUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.receivedEventsUrl != null">
        received_events_url = #{record.receivedEventsUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.siteAdmin != null">
        site_admin = #{record.siteAdmin,jdbcType=VARCHAR},
      </if>
      <if test="record.company != null">
        company = #{record.company,jdbcType=VARCHAR},
      </if>
      <if test="record.blog != null">
        blog = #{record.blog,jdbcType=VARCHAR},
      </if>
      <if test="record.location != null">
        location = #{record.location,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.hireable != null">
        hireable = #{record.hireable,jdbcType=VARCHAR},
      </if>
      <if test="record.bio != null">
        bio = #{record.bio,jdbcType=VARCHAR},
      </if>
      <if test="record.publicRepos != null">
        public_repos = #{record.publicRepos,jdbcType=INTEGER},
      </if>
      <if test="record.publicGists != null">
        public_gists = #{record.publicGists,jdbcType=INTEGER},
      </if>
      <if test="record.followers != null">
        followers = #{record.followers,jdbcType=INTEGER},
      </if>
      <if test="record.following != null">
        following = #{record.following,jdbcType=INTEGER},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.privateGists != null">
        private_gists = #{record.privateGists,jdbcType=INTEGER},
      </if>
      <if test="record.totalPrivateRepos != null">
        total_private_repos = #{record.totalPrivateRepos,jdbcType=INTEGER},
      </if>
      <if test="record.ownedPrivateRepos != null">
        owned_private_repos = #{record.ownedPrivateRepos,jdbcType=INTEGER},
      </if>
      <if test="record.diskUsage != null">
        disk_usage = #{record.diskUsage,jdbcType=VARCHAR},
      </if>
      <if test="record.collaborators != null">
        collaborators = #{record.collaborators,jdbcType=INTEGER},
      </if>
      <if test="record.twoFactorAuthentication != null">
        two_factor_authentication = #{record.twoFactorAuthentication,jdbcType=VARCHAR},
      </if>
      <if test="record.planName != null">
        plan_name = #{record.planName,jdbcType=VARCHAR},
      </if>
      <if test="record.planSpace != null">
        plan_space = #{record.planSpace,jdbcType=VARCHAR},
      </if>
      <if test="record.planCollaborators != null">
        plan_collaborators = #{record.planCollaborators,jdbcType=INTEGER},
      </if>
      <if test="record.planPrivateRepos != null">
        plan_private_repos = #{record.planPrivateRepos,jdbcType=INTEGER},
      </if>
      <if test="record.delFlag != null">
        del_flag = #{record.delFlag,jdbcType=INTEGER},
      </if>
      <if test="record.createBy != null">
        create_by = #{record.createBy,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null">
        update_by = #{record.updateBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updateDate != null">
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update t_user_github
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      github_user_id = #{record.githubUserId,jdbcType=BIGINT},
      login = #{record.login,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      avatar_url = #{record.avatarUrl,jdbcType=VARCHAR},
      gravatar_id = #{record.gravatarId,jdbcType=VARCHAR},
      url = #{record.url,jdbcType=VARCHAR},
      html_url = #{record.htmlUrl,jdbcType=VARCHAR},
      followers_url = #{record.followersUrl,jdbcType=VARCHAR},
      following_url = #{record.followingUrl,jdbcType=VARCHAR},
      gists_url = #{record.gistsUrl,jdbcType=VARCHAR},
      starred_url = #{record.starredUrl,jdbcType=VARCHAR},
      subscriptions_url = #{record.subscriptionsUrl,jdbcType=VARCHAR},
      organizations_url = #{record.organizationsUrl,jdbcType=VARCHAR},
      repos_url = #{record.reposUrl,jdbcType=VARCHAR},
      events_url = #{record.eventsUrl,jdbcType=VARCHAR},
      received_events_url = #{record.receivedEventsUrl,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      site_admin = #{record.siteAdmin,jdbcType=VARCHAR},
      company = #{record.company,jdbcType=VARCHAR},
      blog = #{record.blog,jdbcType=VARCHAR},
      location = #{record.location,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      hireable = #{record.hireable,jdbcType=VARCHAR},
      bio = #{record.bio,jdbcType=VARCHAR},
      public_repos = #{record.publicRepos,jdbcType=INTEGER},
      public_gists = #{record.publicGists,jdbcType=INTEGER},
      followers = #{record.followers,jdbcType=INTEGER},
      following = #{record.following,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      private_gists = #{record.privateGists,jdbcType=INTEGER},
      total_private_repos = #{record.totalPrivateRepos,jdbcType=INTEGER},
      owned_private_repos = #{record.ownedPrivateRepos,jdbcType=INTEGER},
      disk_usage = #{record.diskUsage,jdbcType=VARCHAR},
      collaborators = #{record.collaborators,jdbcType=INTEGER},
      two_factor_authentication = #{record.twoFactorAuthentication,jdbcType=VARCHAR},
      plan_name = #{record.planName,jdbcType=VARCHAR},
      plan_space = #{record.planSpace,jdbcType=VARCHAR},
      plan_collaborators = #{record.planCollaborators,jdbcType=INTEGER},
      plan_private_repos = #{record.planPrivateRepos,jdbcType=INTEGER},
      del_flag = #{record.delFlag,jdbcType=INTEGER},
      create_by = #{record.createBy,jdbcType=VARCHAR},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=VARCHAR},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      version = #{record.version,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zimu.domain.entity.UserGithubEntity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update t_user_github
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="githubUserId != null">
        github_user_id = #{githubUserId,jdbcType=BIGINT},
      </if>
      <if test="login != null">
        login = #{login,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null">
        avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="gravatarId != null">
        gravatar_id = #{gravatarId,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="htmlUrl != null">
        html_url = #{htmlUrl,jdbcType=VARCHAR},
      </if>
      <if test="followersUrl != null">
        followers_url = #{followersUrl,jdbcType=VARCHAR},
      </if>
      <if test="followingUrl != null">
        following_url = #{followingUrl,jdbcType=VARCHAR},
      </if>
      <if test="gistsUrl != null">
        gists_url = #{gistsUrl,jdbcType=VARCHAR},
      </if>
      <if test="starredUrl != null">
        starred_url = #{starredUrl,jdbcType=VARCHAR},
      </if>
      <if test="subscriptionsUrl != null">
        subscriptions_url = #{subscriptionsUrl,jdbcType=VARCHAR},
      </if>
      <if test="organizationsUrl != null">
        organizations_url = #{organizationsUrl,jdbcType=VARCHAR},
      </if>
      <if test="reposUrl != null">
        repos_url = #{reposUrl,jdbcType=VARCHAR},
      </if>
      <if test="eventsUrl != null">
        events_url = #{eventsUrl,jdbcType=VARCHAR},
      </if>
      <if test="receivedEventsUrl != null">
        received_events_url = #{receivedEventsUrl,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="siteAdmin != null">
        site_admin = #{siteAdmin,jdbcType=VARCHAR},
      </if>
      <if test="company != null">
        company = #{company,jdbcType=VARCHAR},
      </if>
      <if test="blog != null">
        blog = #{blog,jdbcType=VARCHAR},
      </if>
      <if test="location != null">
        location = #{location,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="hireable != null">
        hireable = #{hireable,jdbcType=VARCHAR},
      </if>
      <if test="bio != null">
        bio = #{bio,jdbcType=VARCHAR},
      </if>
      <if test="publicRepos != null">
        public_repos = #{publicRepos,jdbcType=INTEGER},
      </if>
      <if test="publicGists != null">
        public_gists = #{publicGists,jdbcType=INTEGER},
      </if>
      <if test="followers != null">
        followers = #{followers,jdbcType=INTEGER},
      </if>
      <if test="following != null">
        following = #{following,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="privateGists != null">
        private_gists = #{privateGists,jdbcType=INTEGER},
      </if>
      <if test="totalPrivateRepos != null">
        total_private_repos = #{totalPrivateRepos,jdbcType=INTEGER},
      </if>
      <if test="ownedPrivateRepos != null">
        owned_private_repos = #{ownedPrivateRepos,jdbcType=INTEGER},
      </if>
      <if test="diskUsage != null">
        disk_usage = #{diskUsage,jdbcType=VARCHAR},
      </if>
      <if test="collaborators != null">
        collaborators = #{collaborators,jdbcType=INTEGER},
      </if>
      <if test="twoFactorAuthentication != null">
        two_factor_authentication = #{twoFactorAuthentication,jdbcType=VARCHAR},
      </if>
      <if test="planName != null">
        plan_name = #{planName,jdbcType=VARCHAR},
      </if>
      <if test="planSpace != null">
        plan_space = #{planSpace,jdbcType=VARCHAR},
      </if>
      <if test="planCollaborators != null">
        plan_collaborators = #{planCollaborators,jdbcType=INTEGER},
      </if>
      <if test="planPrivateRepos != null">
        plan_private_repos = #{planPrivateRepos,jdbcType=INTEGER},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zimu.domain.entity.UserGithubEntity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update t_user_github
    set user_id = #{userId,jdbcType=BIGINT},
      github_user_id = #{githubUserId,jdbcType=BIGINT},
      login = #{login,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      gravatar_id = #{gravatarId,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      html_url = #{htmlUrl,jdbcType=VARCHAR},
      followers_url = #{followersUrl,jdbcType=VARCHAR},
      following_url = #{followingUrl,jdbcType=VARCHAR},
      gists_url = #{gistsUrl,jdbcType=VARCHAR},
      starred_url = #{starredUrl,jdbcType=VARCHAR},
      subscriptions_url = #{subscriptionsUrl,jdbcType=VARCHAR},
      organizations_url = #{organizationsUrl,jdbcType=VARCHAR},
      repos_url = #{reposUrl,jdbcType=VARCHAR},
      events_url = #{eventsUrl,jdbcType=VARCHAR},
      received_events_url = #{receivedEventsUrl,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      site_admin = #{siteAdmin,jdbcType=VARCHAR},
      company = #{company,jdbcType=VARCHAR},
      blog = #{blog,jdbcType=VARCHAR},
      location = #{location,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      hireable = #{hireable,jdbcType=VARCHAR},
      bio = #{bio,jdbcType=VARCHAR},
      public_repos = #{publicRepos,jdbcType=INTEGER},
      public_gists = #{publicGists,jdbcType=INTEGER},
      followers = #{followers,jdbcType=INTEGER},
      following = #{following,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      private_gists = #{privateGists,jdbcType=INTEGER},
      total_private_repos = #{totalPrivateRepos,jdbcType=INTEGER},
      owned_private_repos = #{ownedPrivateRepos,jdbcType=INTEGER},
      disk_usage = #{diskUsage,jdbcType=VARCHAR},
      collaborators = #{collaborators,jdbcType=INTEGER},
      two_factor_authentication = #{twoFactorAuthentication,jdbcType=VARCHAR},
      plan_name = #{planName,jdbcType=VARCHAR},
      plan_space = #{planSpace,jdbcType=VARCHAR},
      plan_collaborators = #{planCollaborators,jdbcType=INTEGER},
      plan_private_repos = #{planPrivateRepos,jdbcType=INTEGER},
      del_flag = #{delFlag,jdbcType=INTEGER},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      version = #{version,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>